namespace FacetedWorlds.Ledger.Model;

fact Identity {
key:
    string anonymousId;

query:
	Share *activeShares {
		Share s : s.identity = this
			where s.isActive
	}
}

fact Share {
key:
	unique;
	publish Identity identity;
	Company company;

query:
	bool isActive {
		not exists ShareRevoke r : r.share = this
	}
}

fact ShareRevoke {
key:
	Share share;
}

fact Company {
key:
	unique;

mutable:
	publish string name;

query:
}

fact Year {
key:
	publish Company company;
	int calendarYear;
}

fact Account {
key:
	unique;
	publish Company company;
	int type;

mutable:
	string name;
}

fact Book {
key:
	Account account;
	Year year;

query:
	Entry* credits {
		Entry e : e.credit = this
			where not e.isVoided
	}

	Entry* debits {
		Entry e : e.debit = this
			where not e.isVoided
	}
}

fact Entry {
key:
	unique;
	Book credit;
	Book debit;
	date entryDate;
	float amount;
	time created;

mutable:
	string id;
	string description;

query:
	bool isVoided {
		exists EntryVoid v : v.entry = this
	}
}

fact EntryVoid {
key:
	Entry entry;
	time voided;
}
